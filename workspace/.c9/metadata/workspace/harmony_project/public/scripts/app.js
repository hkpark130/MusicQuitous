{"changed":false,"filter":false,"title":"app.js","tooltip":"/harmony_project/public/scripts/app.js","value":"'use strict';\n\nnavigator.getUserMedia = ( navigator.getUserMedia ||\n                       navigator.webkitGetUserMedia ||\n                       navigator.mozGetUserMedia ||\n                       navigator.msGetUserMedia);\nvar test;\nvar blobAudio;\nvar app;\nvar record = document.querySelector('.record');\nvar stop = document.querySelector('.stop');\nvar soundClips = document.querySelector('.sound-clips');\nvar canvas = document.querySelector('.visualizer');\nvar count_label = document.getElementsByName('count_label')[0];\nvar timer_label = document.getElementsByName('timer_label')[0];\nvar count = 5;\nvar count_thread;\nvar audioCtx = new (window.AudioContext || webkitAudioContext)();\nvar canvasCtx = canvas.getContext(\"2d\");\nvar mediaRecorder;\n\nvar music_insts = document.getElementsByName(\"music_inst[]\");       //audio 태그\nvar instruments = document.getElementsByName(\"instruments[]\");      //input hidden 태그\nvar music_particis = document.getElementsByName(\"music_partici[]\"); //audio 태그\nvar participants = document.getElementsByName(\"participants[]\");    //input hidden 태그\nvar midi_id = document.getElementsByName(\"midi_id\");                //input hidden 태그\nvar band_board_id = document.getElementsByName(\"band_board_id\");    //input hidden 태그\nvar input_data = document.getElementsByName(\"data\"); \nvar selected_insts = [];\nvar selected_particis = [];\nvar timerStop; // 민호가 만든 변수\n\nfor (var i = 0; i<instruments.length ;i++){\n    selected_insts.push(instruments[i].value);\n}\nfor (var i = 0; i<participants.length ;i++){\n    selected_particis.push(participants[i].value);\n}\n\nvar isRecording = false;\n\n\n\nif (navigator.getUserMedia) {\n   navigator.getUserMedia (\n      {\n         audio: true\n      },\n      // Success callback\n      function(stream) {\n      \t mediaRecorder = new MediaRecorder(stream);\n        \n    \n          app = new PlayRTC({\n              projectKey: '60ba608a-e228-4530-8711-fa38004719c1',\n              localMediaTarget: 'localVideo',\n              mimeType: 'audio/mpeg',\n              video: false\n          });\n          app.createChannel();\n\n      \t visualize(stream);\n\n      \t record.onclick = function() {\n            if(!isRecording) {\n                count = 5;\n                record.disabled = true;\n                stop.disabled = true;\n                count_thread = setInterval(\"counting()\", 500);\n                setTimeout('record_start()', 3000);\n               \n               \n            }\n      \t }\n\n      \t stop.onclick = function() {\n      \t     metronomeStart();\n      \t     timeStop();\n             isRecording = false;\n             for(var i = 0;i<music_insts.length;i++){\n                 music_insts[i].pause();\n                 music_insts[i].currentTime = 0;\n             }\n             for(var i = 0;i<music_particis.length;i++){\n                 music_particis[i].pause();\n                 music_particis[i].currentTime = 0;\n             }\n      \t \tmediaRecorder.stop();\n             app.getMedia().recordStop();\n\n      \t \trecord.style.background = \"\";\n      \t \trecord.style.color = \"\";\n      \t }\n\n      \t mediaRecorder.ondataavailable = function(e) {\n\n\n\n      \t   var clipContainer = document.createElement('article');\n\n           var audio = document.createElement('audio');\n           var deleteButton = document.createElement('button');\n           var saveButton = document.createElement('button');\n            var playButton = document.createElement('button');\n            var stopButton = document.createElement('button');\n\n           clipContainer.classList.add('clip');\n           audio.setAttribute('controls', '');\n           deleteButton.innerHTML = \"Delete\";\n           saveButton.innerHTML = \"Save\";\n            playButton.innerHTML = \"Play\";\n            stopButton.innerHTML = \"Stop\";\n            \n            playButton.onclick = function(){\n               audio.play();\n                for(var i = 0;i<music_insts.length;i++){\n                    music_insts[i].play();\n                }\n                for(var i = 0;i<music_particis.length;i++){\n                    music_particis[i].play();\n                }\n            }\n            \n            stopButton.onclick = function(){\n               audio.pause();\n               audio.currentTime = 0;\n                for(var i = 0;i<music_insts.length;i++){\n                     music_insts[i].pause();\n                     music_insts[i].currentTime = 0;\n                 }\n                 for(var i = 0;i<music_particis.length;i++){\n                     music_particis[i].pause();\n                     music_particis[i].currentTime = 0;\n                 }\n            }\n\n           clipContainer.appendChild(audio);\n           clipContainer.appendChild(deleteButton);\n           clipContainer.appendChild(saveButton);\n           \n           clipContainer.appendChild(playButton);\n           clipContainer.appendChild(stopButton);\n           soundClips.appendChild(clipContainer);\n\n           var audioURL = window.URL.createObjectURL(e.data);\n           var te = e.data;\n           var fr = new FileReader();\n\n\n           audio.src = audioURL;\n\n             saveButton.onclick = function (e) {\n                    blobAudio = te;\n                     send(blobAudio,'/gakuhu_modi');\n\n             }\n\n\n           deleteButton.onclick = function(e) {\n             var evtTgt = e.target;\n             evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);\n           }\n\n\n      \t }\n      },\n\n      // Error callback\n      function(err) {\n\n      }\n   );\n}\n\nfunction visualize(stream) {\n  var source = audioCtx.createMediaStreamSource(stream);\n\n  var analyser = audioCtx.createAnalyser();\n  analyser.fftSize = 2048;\n  var bufferLength = analyser.frequencyBinCount;\n  var dataArray = new Uint8Array(bufferLength);\n\n  source.connect(analyser);\n  //analyser.connect(audioCtx.destination);\n  \n  var WIDTH = canvas.width;\n  var HEIGHT = canvas.height;\n\n  draw();\n\n  function draw() {\n\n    requestAnimationFrame(draw);\n\n    analyser.getByteTimeDomainData(dataArray);\n\n    canvasCtx.fillStyle = 'rgba(255, 255, 255,0.5)';\n    canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);\n\n    canvasCtx.lineWidth = 2;\n    canvasCtx.strokeStyle = 'rgb(255, 0, 0)';\n\n    canvasCtx.beginPath();\n\n    var sliceWidth = WIDTH * 1.0 / bufferLength;\n    var x = 0;\n\n\n    for(var i = 0; i < bufferLength; i++) {\n \n      var v = dataArray[i] / 128.0;\n      var y = v * HEIGHT/2;\n\n      if(i === 0) {\n        canvasCtx.moveTo(x, y);\n      } else {\n        canvasCtx.lineTo(x, y);\n      }\n\n      x += sliceWidth;\n    }\n\n    canvasCtx.lineTo(canvas.width, canvas.height/2);\n    canvasCtx.stroke();\n\n  }\n\n}\n\n\n\n//***************************나훔 BPM**********************************//\nvar arg_volume = 0;\nfunction ShowSliderValue(sVal){\n         var obValueView = document.getElementById(\"slider_value_view\");\n         obValueView.innerHTML = sVal\n    }\nfunction ShowVolume(sVal){\n         var obValueView = document.getElementById(\"slider_volume_view\");\n         obValueView.innerHTML = sVal\n    }\nfunction metronomeStop(bpm,volume){\n\tif(bpm){\n\t\tdrop = (60/bpm)*1000;\n\t}else{\n\t    var temp = document.getElementById(\"bpm_bar\").value;\n\t    drop = (60/temp)*1000;\n\t}\n\tif(volume != 0){\n\t\targ_volume = volume/100;\n\t}else{\n\t\targ_volume = 0;\n\n\t}\n\tif(volume)\n\t    volume_save = arg_volume;\n\t\n\tsetitval=setInterval(\"metronome(volume_save)\", drop); //시간 값 동적으로 받기\n}\nfunction metronomeStart(){\n\tif(setitval){clearInterval(setitval);}\n}\n\nfunction metronome(arg_volume){\n\tvar volume;\n\tif(arg_volume==0 || arg_volume>0 && arg_volume <=100){\n\t\tvolume = arg_volume;\n\t}else if(!arg_volume){\n\t\tvolume = 0.7;\n\t}\n\tvar metronome = new Audio('../metronome/metronome.wav');\n\n\tmetronome.volume = volume;\t\t//볼룸값 동적으로 받기\n\tmetronome.play();\n}\n\nfunction bpmStop(){\n    if(setitval){clearInterval(setitval);}\n}\n//***************************나훔 BPM 끝**********************************//\n\n\n\n\n//-----------------------------\n\nfunction record_start() {\n    metronomeStop(118);\n    timerStop = setInterval(time,1000);\n    for(var i = 0; i<music_insts.length;i++){\n            if(music_insts[i].readyState != 4){\n                console.log(\"fail\");\n                return ;\n            }\n    }\n    \n    for(var i = 0; i<music_particis.length;i++){\n            if(music_particis[i].readyState != 4){\n                console.log(\"fail\");\n                return ;\n            }\n    }\n                \n    for(var i = 0;i<music_insts.length;i++){\n        music_insts[i].play();\n    }\n    for(var i = 0;i<music_particis.length;i++){\n        music_particis[i].play();\n    }\n\n    stop.disabled = false;\n    mediaRecorder.start();\n    app.getMedia().record();\n\n   \n}\n\nfunction counting() {\n    count_label.innerHTML = count;\n    count -= 1;\n    if(count == -1){\n        isRecording = true;\n        clearInterval(count_thread);\n        count_label.innerHTML = '';\n        record.disabled = false;\n    }\n}\nvar modi_url;\n\nfunction file_up(){\n    \n   if(input_data[0].value == ''){\n       alert('파일을 선택해주세요.');\n       return ;\n   }\n   \n    send(input_data[0]['files'][0],null);\n}\n\nfunction send(data,modi=null) {\n    var fd = new FormData();\n    fd.append('fname', 'audioBlob');\n    fd.append('data',data);\n    fd.append('mimeType',\"audio/mpeg\");\nmodi_url = modi;\n    $.ajax({\n        url: \"/blobTest\",\n        type: \"POST\",\n        processData: false,\n        contentType: false,\n        data: fd,\n        dataType: 'json',\n        success:function(data){\n\n            if(modi_url == null){\n                \n        \n                post_to_url('/recordupload',{\n                    \"_token\":  $('meta[name=\"csrf-token\"]').attr('content'),\n                    'file_name' : data,\n                    'selected_insts':selected_insts,\n                    'selected_particis':selected_particis,\n                    'midi_id':midi_id[0].value,\n                    'band_board_id':band_board_id[0].value,\n                });\n            }else{\n                 post_to_url(modi_url,{\n                    \"_token\":  $('meta[name=\"csrf-token\"]').attr('content'),\n                    'file_name' : data,\n                    'selected_insts':selected_insts,\n                    'selected_particis':selected_particis,\n                    'midi_id':midi_id[0].value,\n                    'band_board_id':band_board_id[0].value,\n                });\n            }\n\n        },\n        error: function () {\n            alert('오류가 발생하였습니다.');\n        }\n    });\n\n}\n\nfunction post_to_url(path, params) {\n\n    var form = document.createElement(\"form\");\n    form.setAttribute(\"method\", \"post\");\n    form.setAttribute(\"action\", path);\n    \n    for(var key in params) {\n        var hiddenField = document.createElement(\"input\");\n        hiddenField.setAttribute(\"type\", \"hidden\");\n        hiddenField.setAttribute(\"name\", key);\n        hiddenField.setAttribute(\"value\", params[key]);\n        form.appendChild(hiddenField);\n    }\n\n    document.body.appendChild(form);\n    form.submit();\n}\n\n/*---------------------민호--------------------*/\nvar countt = 0;\nvar count3 = 0;\nvar count4 = 0;\nvar count5 = 0;\nvar bun = 1;\nfunction time(){\n countt++;\n timer_label.innerHTML=countt;\n if(countt>=60){\n     timer_label.innerHTML=bun+':'+count3;\n     count3++;\n     if(count3>=60){\n         bun=2;\n         timer_label.innerHTML=bun+':'+count4;\n         count4++;\n         if(count4>=60){\n             bun=3;\n            timer_label.innerHTML=bun+':'+count5;\n            count5++;\n         \n         }\n     }\n     \n     \n }\n \n \n}\nfunction timeStop(){\n    clearInterval(timerStop);\n    timer_label.innerHTML=countt;\n    countt=0;\n    count3=0;\n    count4=0;\n    count5=0;\n    bun=0;\n    \n}\n\n\n\n\n\n\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":8040,"scrollleft":0,"selection":{"start":{"row":431,"column":20},"end":{"row":431,"column":20},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":422,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1503592046912}